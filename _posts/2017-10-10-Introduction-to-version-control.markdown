---
layout: post
title:  版本控制入门
date:   2017-10-10 13:00:20 +0800
description: 版本控制简介
img: intriduction-to-version-control.jpg 
tags: [Blog, Git, Version Control]
author: Alex Sun
---

### 版本控制入门
### Introduction to version control



&emsp;&emsp;版本控制（Version Control）是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。引用自《Pro Git》也是一种软件开发技巧，通过版本控制系统确保不同人所开编辑的同一文件都能得到更新，引用自“百度百科-版本控制”词条并保证开发过程中所有版本的变更可追溯和可回溯。版本控制系统通过文档控制记录各个源文件的改动，并为每次改动编上序号。  

&emsp;&emsp;有了版本控制你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。 使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。 但额外增加的工作量却微乎其微。引用自《Pro Git》  

&emsp;&emsp;一些开发者习惯性的通过拷贝整个项目或者拷贝其中的某些文件，并在文件名上标记版本号的方法来做版本控制，只能说这样做也能实现一些版本控制的结果，但是这并不是一种聪明的做法，一旦错误的覆盖或修改了文件，你将很难讲文件恢复到原来的状态。即便一些很简单的本地版本控制系统，其在版本控制过程中的便捷也要优于拷贝的方法。  

&emsp;&emsp;版本控制系统可以分为本地版本控制系统、集中化版本控制系统和分布式版本控制系统。  

1.2.1 本地版本控制  
&emsp;&emsp;为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。  
&emsp;&emsp;其中最流行的一种叫做 RCS，现今许多计算机系统上都还看得到它的踪影。 甚至在流行的 Mac OS X 系统上安装了开发者工具包之后，也可以使用 rcs 命令。 它的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。引用自《Pro Git》  

1.2.2 集中版本控制系统  
&emsp;&emsp;集中版本控制系统是为了解决多人协作、协同开发而设计版本控制系统。这类系统包括CVS、SVN、Subversion等等，集中式版本控制系统都具备一个集中管理的服务器，保存所有文件的修订版本，协同工作的人通过客户端连接这台服务器，取出最新的文件，或者提交更新。集中式版本控制系统也广泛应用于各个领域。这种集中版本控制系统，解决了本地版本控制系统无法方便的协同工作的问题，并且让项目中的每个人在一定程度上看到项目中其他人做了什么，管理员也可以掌控每个开发者的权限。管理一个集中版本控制系统的难度远远低于在每个客户端上维护本地数据库来的容易。  

&emsp;&emsp;事分两面，有好有坏。 这么做最显而易见的缺点是中央服务器的单点故障。 如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。 如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据——包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。 本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）面世了。  

1.2.3 分布式版本控制系统  

&emsp;&emsp;在分布式版本控制系统中，比如 Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。如下图所示。  

<img src="/assets/img/blog_img/version_control/Distributed-version-control-system.jpg" width="200"  alt="分布式版本控制系统"/>

&emsp;&emsp;更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。 你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。引用自《Pro Git》  


再次对您看到这篇博文表示感谢！  
Thank you for reading this blog.
